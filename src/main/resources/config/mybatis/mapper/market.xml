<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="market">

	<!-- 전체조회 -->
	<select id="market_list" parameterType="map"  resultType="vo.MarketVo">
		select m.* ,
     (select count(market_idx) from MARKET_LIKE where m.market_idx=market_idx) cnt,
     (select count(market_idx) from MARKET_LIKE where m.market_idx=market_idx and mem_idx=#{m_idx}) heart_flag
   from
    (select * from MARKET) m order by m.market_idx desc
	</select>
	
	<!--mem_idx에 해당하는 list 조회  -->
   <select id="market_mem_list" parameterType="java.util.Map" resultType="vo.MarketVo">
      	select * from
		(
		   select
		      m.*,
		      rank() over(order by market_idx desc) no
		   from  (select * from market where mem_idx=#{mem_idx}) m
		)
		where no between #{start} and #{end}
      
   </select>
   
    <!--mem_idx에 해당하는 좋아요한 게시글  조회  -->
   	<select id="market_like_mem_list" parameterType="int" resultType="vo.MarketVo">
		select * from
		(
		   select
		      ml.*,
		      rank() over(order by market_idx desc) no
		   from  (  select * from market
					where  market_idx in (select market_idx from market_like where mem_idx=#{mem_idx})
		          ) ml
		)
		where no between #{start} and #{end}
	
	</select>
   
   
	
	<!-- 페이징처리를 위한 조회 -->
	<select id="market_condition_list" parameterType="java.util.Map" resultType="vo.MarketVo">
	select * from
	(
		select 
			m.*,
			rank() over(order by market_idx desc) market_no,
			 (select count(market_idx) from MARKET_LIKE where m.market_idx=market_idx) cnt,
     (select count(market_idx) from MARKET_LIKE where m.market_idx=market_idx and mem_idx=#{m_idx}) heart_flag
		from
			(select * from market
				<trim prefix="where" prefixOverrides="or">
					<if test="market_title != null">
						market_title like '%' || #{ market_title } || '%'
					</if>			

					<if test="market_content!= null">
						or market_content like '%' || #{ market_content } || '%'
					</if>			

					<if test="mem_nickname != null">
						or mem_nickname like '%' || #{ mem_nickname } || '%'
					</if>			
				</trim>
			
			) m
	)	
		where market_no between #{ start } and #{ end }
	</select>
	
	<!-- 전체게시물수 구하기 -->
	<select id="market_row_total" resultType="int">
		select nvl(count(*),0) from market
	</select>
	
	<!-- 검색 조건별 게시물수 구하기 -->
	<select id="market_condition_row_total" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from market
		<trim prefix="where" prefixOverrides="or">
					<if test="market_title != null">
						market_title like '%' || #{ market_title } || '%'
					</if>			

					<if test="market_content!= null">
						or market_content like '%' || #{ market_content } || '%'
					</if>			

					<if test="mem_nickname != null">
						or mem_nickname like '%' || #{ mem_nickname } || '%'
					</if>			
		</trim>
	</select>
	
	<!-- 전체검색 -->
	<select id="market_condition_total" parameterType="java.lang.String" resultType="vo.MarketVo">
		select * from market
			where
						market_title like '%' || #{ search_text } || '%'
						or market_content like '%' || #{ search_text } || '%'
	
	</select>
	
	<!--market_idx해당되는 게시물1건   -->
   <select id="market_one" parameterType="int" resultType="vo.MarketVo">
      select * from market where market_idx=#{market_idx}
   </select>

   <!--  게시글 추천 시 Like 테이블에 insert  -->
   <insert id="market_insertlike" parameterType="vo.MarketVo"> 
      insert into market_like values(seq_market_like_idx.nextVal,#{mem_idx},#{market_idx},1) 
   </insert>
   
   <!--  게시글 추천취소 시 좋아요 테이블에서 삭제   -->
   <delete id="market_deletelike" parameterType="vo.MarketVo"> 
      delete from market_like where market_idx=#{market_idx} and mem_idx=#{mem_idx}
   </delete>
   
   <!-- 조회수 증가 -->
   <update id="market_update_readhit" parameterType="int">
      update market 
         set market_hit_count = market_hit_count + 1 
      where market_idx = #{ market_idx}
   </update>

</mapper>













<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="carpool">

	<!-- 전체조회 -->
	<select id="carpool_list" parameterType="map" resultType="vo.CarpoolVo">
		select c.* ,
	     (select count(carpool_idx) from CARPOOL_LIKE where c.carpool_idx=carpool_idx) cnt,
	     (select count(carpool_idx) from CARPOOL_LIKE where c.carpool_idx=carpool_idx and mem_idx=#{m_idx}) heart_flag
	  	 from
	    (select * from CARPOOL) c order by c.carpool_idx desc
	</select>
	
 <!--mem_idx에 해당하는 카풀리스트   -->
   <select id="carpool_mem_list" parameterType="java.util.Map" resultType="vo.CarpoolVo">
     select * from
	(
	   select
	      c.*,
	      rank() over(order by carpool_idx desc) no
	   from  (select * from carpool where mem_idx=#{mem_idx}) c
	)
	where no between #{start} and #{end}
   </select>
   
    <!--mem_idx에 해당하는 좋아요한 게시글  조회  -->
   	<select id="carpool_like_mem_list" parameterType="int" resultType="vo.CarpoolVo">
		select * from
		(
		   select
		      cl.*,
		      rank() over(order by carpool_idx desc) no
		   from  (  select * from carpool
					where  carpool_idx in (select carpool_idx from carpool_like where mem_idx=#{mem_idx})
		          ) cl
		)
		where no between #{start} and #{end}
	
	</select>
   
   
   
	
	<!-- 페이징처리를 위한 조회 -->
	<select id="carpool_condition_list" parameterType="java.util.Map" resultType="vo.CarpoolVo">
	select * from
	(
		select 
			c.*,
			rank() over(order by carpool_idx desc) carpool_no,
			(select count(carpool_idx) from CARPOOL_LIKE where c.carpool_idx=carpool_idx) cnt,
	        (select count(carpool_idx) from CARPOOL_LIKE where c.carpool_idx=carpool_idx and mem_idx=#{m_idx}) heart_flag
		from
			(select * from carpool
				<trim prefix="where" prefixOverrides="or">
					<if test="carpool_title != null">
						carpool_title like '%' || #{ carpool_title } || '%'
					</if>			

					<if test="carpool_content!= null">
						or carpool_content like '%' || #{ carpool_content } || '%'
					</if>			

					<if test="mem_nickname != null">
						or mem_nickname like '%' || #{ mem_nickname } || '%'
					</if>			
				</trim>
			
			) c
	)	
		where carpool_no between #{ start } and #{ end }
	</select>
	
	<!-- 전체게시물수 구하기 -->
	<select id="carpool_row_total" resultType="int">
		select nvl(count(*),0) from carpool
	</select>
	
	<!-- 검색 조건별 게시물수 구하기 -->
	<select id="carpool_condition_row_total" parameterType="java.util.Map" resultType="int">
		select nvl(count(*),0) from carpool
		<trim prefix="where" prefixOverrides="or">
					<if test="carpool_title != null">
						carpool_title like '%' || #{ carpool_title } || '%'
					</if>			

					<if test="carpool_content!= null">
						or carpool_content like '%' || #{ carpool_content } || '%'
					</if>			

					<if test="mem_nickname != null">
						or mem_nickname like '%' || #{ mem_nickname } || '%'
					</if>			
		</trim>
	</select>
	
	<!-- 전체검색 -->
	<select id="carpool_condition_total" parameterType="java.lang.String" resultType="vo.CarpoolVo">
		select * from carpool
			where
						carpool_title like '%' || #{ search_text } || '%'
						or  carpool_content like '%' || #{ search_text } || '%'
	</select>
	
	
	<!--carpool_idx해당되는 게시물1건   -->
   <select id="carpool_one" parameterType="int" resultType="vo.CarpoolVo">
      select * from carpool where carpool_idx=#{carpool_idx}
   </select>

   <!--  게시글 추천 시 Like 테이블에 insert  -->
   <insert id="carpool_insertlike" parameterType="vo.CarpoolVo"> 
      insert into carpool_like values(seq_carpool_like_idx.nextVal,#{mem_idx},#{carpool_idx},1) 
   </insert>
   
   <!--  게시글 추천취소 시 좋아요 테이블에서 삭제   -->
   <delete id="carpool_deletelike" parameterType="vo.CarpoolVo"> 
      delete from carpool_like where carpool_idx=#{carpool_idx} and mem_idx=#{mem_idx}
   </delete>
   
   <!-- 조회수 증가 -->
   <update id="carpool_update_readhit" parameterType="int">
      update carpool 
         set carpool_hit_count = carpool_hit_count + 1 
      where carpool_idx = #{ carpool_idx}
   </update>
	
	

</mapper>












